package pojo;

//专门用于form表单中的数据
public class User {
    //定义两个成员变量
	private String uname;
	private String upwd;
	public String getUname() {
		return uname;
	}
	public void setUname(String uname) {
		this.uname = uname;
	}
	public String getUpwd() {
		return upwd;
	}
	public void setUpwd(String upwd) {
		this.upwd = upwd;
	}
	@Override
	public String toString() {
		return "User [uname=" + uname + ", upwd=" + upwd + "]";
	}
	
}
-----------------------------------------
package controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import pojo.User;

@Controller
public class UserController {
    @RequestMapping("/toJSP")
	public String toJSP() {
    	//专门用于【显示页面】的请求
		return "UserRegist";
	}
    
    //特别注意：该请求与form表单的action对应
    @RequestMapping("/regist")
    public String regist(User user,Model model) {//user封装的数据
    	/*如何获取页面中的表单数据？
    	 * 原生态的方法：
    	 * request.getParameter("uname")
    	 * springmvc的方法：直接在【参数列表】中【添加变量】即可
    	 * 注意：变量名必须与form表单中的name一致
    	 */
    	System.out.println(user.getUname());
    	System.out.println(user.getUpwd());
    	return "UserRegist";
    }
}
------------------------------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>注册页面</title>
</head>
<body>
    <form action="${pageContext.request.contextPath }/regist" method="post">
        <table>
            <tr>
                <td>用户名:</td>
                <td><input type="text" name="uname" /></td>
            </tr>
             <tr>
                <td>密码:</td>
                <td><input type="password" name="upwd" /></td>
            </tr>
            <tr>
                <td><input type="submit" name="注册" /></td>
            </tr>
            
        </table>
    
    </form>
</body>
</html>
-----------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd 
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd ">
	
	<!-- 开启包扫描 -->
	<context:component-scan base-package="controller"></context:component-scan>
	<!-- 开启springmvc的注解扫描器 -->
	<mvc:annotation-driven />
	
	<!-- 配置视图解析器：ViewResolver 专门用于页面的跳转，以及jsp页面的动态渲染 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <!-- 页面的前缀格式：固定写法指的是页面路径 -->
	    <property name="prefix" value="/WEB-INF/"></property>
	    <!-- 页面的后缀格式：固定写法指的是页面的后缀名 -->
	    <property name="suffix" value=".jsp"></property>
	</bean>
	
	
	
</beans>
-----------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <display-name>springmvc02-1-regist</display-name>
  <servlet>
    <servlet-name>springmvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>springmvc</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- 配置解决中文乱码的过滤器 -->
  <filter> 
      <!-- 相对固定的写法 -->
      <filter-name>encodingFilter</filter-name>
      <!-- 这是spring提供的编码过滤器 -->
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <!-- 配置编码格式为utf-8 -->
      <init-param>
          <!-- encoding：相对固定的写法 -->
          <param-name>encoding</param-name>
          <!-- value值就是需要定义的编码格式 -->
          <param-value>utf-8</param-value>
      </init-param>
  </filter>
  <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <!-- /*：前缀型的通配符
                          表示匹配所有的url，举例格式为：/regist ..不包括jsp页面-->
      <url-pattern>/*</url-pattern>
  </filter-mapping>
  
</web-app>
