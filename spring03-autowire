package pojo;

public class Dog {
	private String name;
	private int age;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	@Override
	public String toString() {
		return "Dog [name=" + name + ", age=" + age + "]";
	}

}
----------------------------------------------------------------
package pojo;

public class User {
	//引用数据类型
	private Dog dog;

	public Dog getDog() {
		return dog;
	}

	public void setDog(Dog dog) {
		this.dog = dog;
	}

	@Override
	public String toString() {
		return "User [dog=" + dog + "]";
	}

}
---------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd ">
	
	<!-- IOC:控制反转
	     IOC容器：spring负责创建对象并把对象放入map集合中，
	                           通过IOC的方式获取对象时，其实是从map中取值
	     IOC的使用：其实就是一个bean标签 -->
	<!-- DI:依赖注入   
	     DI的注入方式：set方式以及constructor方式
	                  set方式是开发过程中最为常用
	                  constructor方式一般用在程序设计阶段-->
	<bean id="dog" class="pojo.Dog">
	    <property name="name" value="小狗狗"></property>
	    <property name="age" value="2"></property>
	</bean>
	    <!-- autowire="byName"
	         1.在加载配置文件时，自动找到user类中的setxxx()方法
	         2.spring框架，自动拆分与匹配setxxx()，获取xxx的id值
	         3.xxx的id的值，首字母小写后，自动匹配<bean id="xxx">标签
	         4.如果没有匹配成功，不会报错，只会注入一个null
	         结论：byName根据id去获取对象的 
	         重点：必须要有set方法，才能使用autowire方法！！！！-->
	    <!-- autowire="byType"
	         1.在加载配置文件时，自动找到setxxx(形参)的方法中的形参！！！！
	         2.spring框架，自动解析到形参的class类型
	         3.拿到class类型去匹配<bean class="类型" />标签中的class
	         4.如果没有匹配到class，那么注入null值，不会报错
	         结论：byType是通过class获取bean对象的！！！
	         重要：byType必须要有set方法 -->
	    <bean id="user" class="pojo.User" autowire="byType">
	    <!-- <property name="dog" ref="dog"></property> -->
	</bean>
	
</beans>
-------------------------------------------------------------------
package test;

import org.junit.Before;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import pojo.User;

public class TestUtil {
	//成员变量
	ApplicationContext context = null;
	//单元测试与before方法
	@Before
	public void before() {
		context = new ClassPathXmlApplicationContext("applicationContext.xml");
	}
    @Test
	public void test01() {
		User user = (User) context.getBean("user");
		System.out.println(user);
	}
}
